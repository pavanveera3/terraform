name: "Terraform Workflow"

on:
  push:
    branches:
      - main

jobs:
  checkout-code:
    name: "Checkout Code"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

  terraform-init:
    name: "Terraform Init"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.5.4"  # Replace with your desired Terraform version

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{secrets.AWS_BUCKET_NAME}}" -backend-config="key=${{secrets.AWS_BUCKET_KEY_NAME}}" -backend-config="region=${{secrets.AWS_REGION}}"

  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    needs: [checkout-code, terraform-init]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.5.4"  # Replace with your desired Terraform version

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{secrets.AWS_BUCKET_NAME}}" -backend-config="key=${{secrets.AWS_BUCKET_KEY_NAME}}" -backend-config="region=${{secrets.AWS_REGION}}"

      - name: Terraform Plan
        if: ${{ github.event_name == 'push' }}
        id: plan
        run: terraform plan -out=tfplan
        continue-on-error: true

      - name: Terraform Plan Status
        if: ${{ failure() }}
        run: echo "Terraform plan failed, check your code." && exit 1

      - name: Upload tfplan artifact
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          name: tfplan
          path: tfplan

  terraform-apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    needs: [checkout-code, terraform-init, terraform-plan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.5.4"  # Replace with your desired Terraform version

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=${{secrets.AWS_BUCKET_NAME}}" -backend-config="key=${{secrets.AWS_BUCKET_KEY_NAME}}" -backend-config="region=${{secrets.AWS_REGION}}"



      - name: Download tfplan artifact
        uses: actions/download-artifact@v2
        with:
          name: tfplan


      - name: Terraform Apply
        if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        run: terraform apply -auto-approve tfplan
        continue-on-error: true

  terraform-destroy:
    name: "Terraform Destroy"
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    needs: [terraform-apply]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.5.4"  # Replace with your desired Terraform version
  
      - name: Download tfplan artifact
        uses: actions/download-artifact@v2
        with:
          name: tfplan


      - name: Terraform Init
        id: init
        run: terraform init -reconfigure -backend-config="bucket=${{secrets.AWS_BUCKET_NAME}}" -backend-config="key=${{secrets.AWS_BUCKET_KEY_NAME}}" -backend-config="region=${{secrets.AWS_REGION}}"


      - name: Terraform Destroy
        if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        run: terraform destroy -auto-approve
